{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\VISITANDOS\\\\Downloads\\\\quizz-app-reactjs\\\\quizz-app-reactjs\\\\src\\\\Secciones\\\\Cuestionario.js\",\n    _s = $RefreshSig$();\n\nimport React, { useMemo, useState } from \"react\";\nimport preguntas from \"../Secciones/preguntas\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Cuestionario = ({\n  setResultados\n}) => {\n  _s();\n\n  const [preguntaActual, setPreguntaActual] = useState(0);\n  const [respuestas, setRespuestas] = useState([]);\n  const btnRefs = useMemo(() => Array(preguntas.length).fill(0).map(i => /*#__PURE__*/React.createRef()), []);\n\n  const manejarClick = miResp => {\n    const respuestaExiste = respuestas.some(r => r.id === miResp.id);\n\n    if (respuestaExiste) {\n      const indexePregunta = respuestas.findIndex(resp => resp.id === miResp.id);\n      const preguntasActualizadas = [...respuestas];\n      preguntasActualizadas[indexePregunta].miOpcion = miResp.miOpcion;\n      preguntasActualizadas[indexePregunta].acerto = preguntasActualizadas[indexePregunta].res.valor === miResp.miOpcion.valor;\n      setRespuestas(preguntasActualizadas);\n    } else {\n      setRespuestas(respuestas => [...respuestas, miResp]);\n    }\n\n    if (btnRefs[preguntaActual]) {\n      if (miResp.acerto) {\n        btnRefs[preguntaActual].current.style.backgroundColor = \"green\";\n      } else {\n        btnRefs[preguntaActual].current.style.backgroundColor = \"red\";\n      }\n    }\n\n    const siguiente = preguntaActual + 1;\n\n    if (siguiente < preguntas.length) {\n      setPreguntaActual(siguiente);\n    }\n  };\n\n  const cambiarPregunta = numero => {\n    setPreguntaActual(numero);\n  };\n\n  const terminar = () => {\n    setResultados(respuestas);\n  };\n\n  const siguientePregun = () => {\n    setPreguntaActual(p => p + 1);\n  };\n\n  const anteriorPregun = () => {\n    setPreguntaActual(p => p - 1);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"botones-flechas\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"flecha\",\n        disabled: preguntaActual === 0,\n        onClick: anteriorPregun,\n        children: `⫷`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 23\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"finalizar\",\n        disabled: respuestas.length !== preguntas.length,\n        onClick: () => terminar(),\n        children: \"Terminar Intento\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 23\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"flecha\",\n        disabled: preguntaActual === preguntas.length - 1,\n        onClick: siguientePregun,\n        children: `⫸`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 23\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tarjeta tarjeta-pregunta\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question-section\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"question-count\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 23\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"question-text\",\n            children: preguntas[preguntaActual].pregunta\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 23\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"answer-section\",\n        children: preguntas[preguntaActual].opciones.map((miOpcion, i) => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => manejarClick({\n            id: preguntas[preguntaActual].id,\n            pre: preguntas[preguntaActual].pregunta,\n            res: preguntas[preguntaActual].respuesta,\n            miOpcion,\n            acerto: preguntas[preguntaActual].respuesta.valor === miOpcion.valor\n          }),\n          children: [miOpcion.valor, \" - \", miOpcion.texto]\n        }, i, true, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 23\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 19\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tarjeta-numeros-pregunta\",\n      children: preguntas.map((pregunta, i) => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          cambiarPregunta(i);\n        },\n        ref: btnRefs[i],\n        className: \"sin-responder\",\n        children: i + 1\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Cuestionario, \"nCthTgKM56a2pE0Vrf7xMgoLowA=\");\n\n_c = Cuestionario;\nexport default Cuestionario;\n\nvar _c;\n\n$RefreshReg$(_c, \"Cuestionario\");","map":{"version":3,"sources":["C:/Users/VISITANDOS/Downloads/quizz-app-reactjs/quizz-app-reactjs/src/Secciones/Cuestionario.js"],"names":["React","useMemo","useState","preguntas","Cuestionario","setResultados","preguntaActual","setPreguntaActual","respuestas","setRespuestas","btnRefs","Array","length","fill","map","i","createRef","manejarClick","miResp","respuestaExiste","some","r","id","indexePregunta","findIndex","resp","preguntasActualizadas","miOpcion","acerto","res","valor","current","style","backgroundColor","siguiente","cambiarPregunta","numero","terminar","siguientePregun","p","anteriorPregun","pregunta","opciones","pre","respuesta","texto"],"mappings":"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","sourcesContent":["import React, { useMemo, useState } from \"react\";\r\nimport preguntas from \"../Secciones/preguntas\";\r\n\r\nconst Cuestionario = ({ setResultados }) => {\r\n  const [preguntaActual, setPreguntaActual] = useState(0);\r\n  const [respuestas, setRespuestas] = useState([]);\r\n  const btnRefs = useMemo(\r\n    () =>\r\n      Array(preguntas.length)\r\n        .fill(0)\r\n        .map((i) => React.createRef()),\r\n    []\r\n  );\r\n\r\n\r\n  const manejarClick = (miResp) => {\r\n    const respuestaExiste = respuestas.some((r) => r.id === miResp.id);\r\n    if (respuestaExiste) {\r\n      const indexePregunta = respuestas.findIndex(\r\n        (resp) => resp.id === miResp.id\r\n      );\r\n      const preguntasActualizadas = [...respuestas];\r\n      preguntasActualizadas[indexePregunta].miOpcion = miResp.miOpcion;\r\n      preguntasActualizadas[indexePregunta].acerto =\r\n        preguntasActualizadas[indexePregunta].res.valor ===\r\n        miResp.miOpcion.valor;\r\n\r\n      setRespuestas(preguntasActualizadas);\r\n    } else {\r\n      setRespuestas((respuestas) => [...respuestas, miResp]);\r\n    }\r\n\r\n    if (btnRefs[preguntaActual]) {\r\n      if (miResp.acerto) {\r\n        btnRefs[preguntaActual].current.style.backgroundColor = \"green\";\r\n      } else {\r\n        btnRefs[preguntaActual].current.style.backgroundColor = \"red\";\r\n      }\r\n    }\r\n\r\n    const siguiente = preguntaActual + 1;\r\n    if (siguiente < preguntas.length) {\r\n      setPreguntaActual(siguiente);\r\n    }\r\n  };\r\n\r\n  const cambiarPregunta = (numero) => {\r\n    setPreguntaActual(numero);\r\n  };\r\n\r\n  const terminar = () => {\r\n    setResultados(respuestas);\r\n  };\r\n\r\n  const siguientePregun = () => {\r\n    setPreguntaActual((p) => p + 1);\r\n  };\r\n\r\n  const anteriorPregun = () => {\r\n    setPreguntaActual((p) => p - 1);\r\n  };\r\n\r\n  return (\r\n    \r\n    <>\r\n\r\n\r\n\r\n\r\n                <div className=\"botones-flechas\">\r\n                      <button\r\n                        className=\"flecha\"\r\n                        disabled={preguntaActual === 0}\r\n                        onClick={anteriorPregun}\r\n                      >{`⫷`}</button>\r\n                      <button\r\n                        className=\"finalizar\"\r\n                        disabled={respuestas.length !== preguntas.length}\r\n                        onClick={() => terminar()}\r\n                      >\r\n                        Terminar Intento\r\n                      </button>\r\n                      <button\r\n                        className=\"flecha\"\r\n                        disabled={preguntaActual === preguntas.length - 1}\r\n                        onClick={siguientePregun}\r\n                      >{`⫸`}</button>\r\n                    </div>\r\n                <div className=\"tarjeta tarjeta-pregunta\">\r\n                  <div className=\"question-section\">\r\n                    <div>\r\n                      <div className=\"question-count\">\r\n                      </div>\r\n                      <div className=\"question-text\">\r\n                        {preguntas[preguntaActual].pregunta}\r\n                      </div>\r\n                    </div>\r\n\r\n                  </div>\r\n                  <div className=\"answer-section\">\r\n                    {preguntas[preguntaActual].opciones.map((miOpcion, i) => (\r\n                      <button\r\n                        key={i}\r\n                        onClick={() =>\r\n                          manejarClick({\r\n                            id: preguntas[preguntaActual].id,\r\n                            pre: preguntas[preguntaActual].pregunta,\r\n                            res: preguntas[preguntaActual].respuesta,\r\n                            miOpcion,\r\n                            acerto:\r\n                              preguntas[preguntaActual].respuesta.valor ===\r\n                              miOpcion.valor,\r\n                          })\r\n                        }\r\n                      >\r\n                        {miOpcion.valor} - {miOpcion.texto}\r\n                      </button>\r\n                    ))}\r\n                  </div>\r\n                  \r\n                </div>\r\n                <div className=\"tarjeta-numeros-pregunta\">\r\n                  {preguntas.map((pregunta, i) => (\r\n                    <button\r\n                      onClick={() => {\r\n                        cambiarPregunta(i);\r\n                      }}\r\n                      ref={btnRefs[i]}\r\n                      key={i}\r\n                      className={\"sin-responder\"}\r\n                    >\r\n                      {i + 1}\r\n                    </button>\r\n                  ))}\r\n                </div>\r\n\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Cuestionario;\r\n"]},"metadata":{},"sourceType":"module"}